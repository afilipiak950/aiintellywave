
import { SearchStringType, SearchStringSource } from '../search-string-types';

export const useSearchStringPreview = () => {
  const generatePreview = async (
    type: SearchStringType,
    inputSource: SearchStringSource,
    inputText?: string,
    inputUrl?: string,
    pdfFile?: File | null
  ): Promise<string> => {
    try {
      let prompt = '';
      
      if (inputSource === 'text' && inputText) {
        const keywords = inputText.split(/\s+/).filter(word => word.length > 3).slice(0, 5);
        prompt = `(${keywords.join(' OR ')}) AND "${type === 'recruiting' ? 'resume' : 'business'}"`;
      } else if (inputSource === 'website' && inputUrl) {
        try {
          const domain = new URL(inputUrl).hostname.replace('www.', '');
          
          if (type === 'recruiting') {
            prompt = `Website crawler is analyzing ${domain}...\n\nCurrently extracting job posting details, this may take a few moments.\n\nThe search string will be generated by analyzing the ACTUAL content of the job description including required skills, experience levels, job title, and location information.\n\nSubmit to generate a complete Boolean search string based on the website content.`;
          } else {
            prompt = `Website crawler is analyzing ${domain}...\n\nCurrently extracting company information, this may take a few moments.\n\nThe search string will be generated by analyzing the ACTUAL content of the business website including services, industry, locations, and company details.\n\nSubmit to generate a complete Boolean search string based on the website content.`;
          }
        } catch (error) {
          console.error('Invalid URL format:', error);
          prompt = `Invalid URL format. Please enter a valid URL.`;
        }
      } else if (inputSource === 'pdf' && pdfFile) {
        prompt = `Analyzing PDF: ${pdfFile.name}... The search string will be generated based on all content extracted from the document.`;
      }
      
      return prompt;
    } catch (error) {
      console.error('Error generating preview:', error);
      throw new Error('Failed to generate preview');
    }
  };

  return {
    generatePreview
  };
};
